1.关系型数据库：
    建立在关系模型基础上，由多张相互连接的二维表组成的数据库
    优点：使用表存储数据，格式统一，便于维护
                使用sql语言操作，标准统一，使用方便
2.SQL：
    1.sql语句不区分大小写
    2.单行注释：—或者#，多行注释：/**/
    3.sql语句分类：
        1.DDL语句：数据定义语言，用来定义数据库对象（数据库，表，字段）
        2.DML语句：数据操作语言，用来对数据表中的对象进行增删改
        3.DQL语句；数据查询语句，用来查询数据表中的记录
        4.DCL语句：数据控制语句，用来创建数据库用户，控制数据库的访问权限
    4.DDL语句学习：
        1.查询所有数据库：SHOW DATABASE
        2.查询当前数据库：SELECT DATABASE
        3.创建数据库：CREATE [IF NOT EXISTS]数据库名[DEFAULT CHAERSET字符集][COLIATC排序规则]
        4.删除：DROP DATABASE[IF EXISTS]数据库名
        5.使用：USE[ 数据库名]
    4.DDL表操作-查询：
        1.查询当前数据库所有表：SHOW TABLES；
        2.查询表结构：DESC 表名；
        3.查询指定表的建表语句：SHOW CREATE TABLE 表名；
    5.DDL表操作-创建
        1.CREATE TABLE 表名（
                   字段1 字段1类型[COMMENT 字段1注释]
                   字段2 字段2类型[COMMENT 字段2注释]
                   字段3 字段3类型[COMMENT 字段3注释]
                   字段4 字段4类型[COMMENT 字段4注释]
                    ）[表注释];
            具体操作：
                CREATE TABLE USER(
                        Id int comment’编号’,
                        Name varchar(50) comment’姓名’,
                        Age int comment ‘年龄’,
                        Gender varchar(1)comment ‘性别’)commen‘’;
                DESC USER
                SHOW CREATE TABLE USER
    6.数据库的数据类型：
        1.TINYINT ,SMALLINT,MEDIUMINT,INT or                                 INTEGER,BIGINT,FLOAT,DOUBLE,DECIMAL(指定精度和标度)
        案例：age -> TINYINT(UNSIGNED)
                    score -> double（4，1）
        2.字符串类型：CHAR（定长字符串）,VARCHAR,（变长字符串）TINYBLOB,TINYTEXT,BLOB,TEXT,MEDIUMBLOB,MEDIUMTEXT,LONGBLOB,LONGTEXT
            带blob存储二进制数据（使用不多）
            案例：用户名->varchar
                        name->char
        3.日期类型：DATE,TIME,YEAR,DATETIME,TIMESTAMP,
    7.根据需求创建表（员工信息，编号（纯数字），工号，姓名，性别，年龄，身份证号，入职时间）：
        create table emp(
            id int comment‘’
            workno varchar(10) comment’’,
            Name varchar(10) comment’’,
            Gender char(1) comment’’,
            Age tinyint unsigned comment’’,
            Idcard char(10) comment’’,
            Entrydate date comment’’
            )comment’’;
    8.DDL-表操作-修改
        1.向表结构中添加字段：ALTER TABLE 表名 ADD 字段名 类型( 长度)[comment注释][约束]，例：alter table emp add nickname varchar(20);
        2.修改字段：修改数据类型：alter table 表名 modify 字段名 新数据类型[长度],修改字段名和数据类型：alter table 表名 change 旧字段名 新字段名 类型(长度)[comment注释][约束],例：
alter table emp change nickname username varchar(10)
        3.删除字段：alter table emp drop username
        4.修改表名：alter table emp rename to employee
        5.删除表：drop table emp   ||  truncate table emp（删除指定表，并重新创建该表，会删除数据）
    8.DML语句-数据操作语言，对表中数据进行增删改操作
        1.指定字段添加数据（INSERT）：INSERT INTO 表名（字段名1，字段名2，….）values（值1，值2，….）;
        2.给全部字段添加数据：insert into 表名 values（值1，值2）
        3.批量添加数据：INSERT INTO 表名（字段名1，字段名2，….）values（值1，值2，….）（）（）;或者insert into 表名values（）（）
        4.修改数据：update 表名 set 字段名1=值1，字段名2=值2，…[where条件]
        5.删除数据：delete from 表名 where 条件：delete from emp where gender = ‘女’ 或者delete from 表名（删除所有数据）
    9.DQL查询数据：（以下为编写顺序）
        select 字段列表
        from表名列表
        where 条件列表 （条件可以加比较运算符或between and，in（），like，is null，逻辑运算符：and，or，not）
        group by 分组字段列表 having 分组后条件列表
        order by 排序字段列表
        limit分页参数
        查询多个字段：select 字段1，字段2from表名
        查询所有字段：select * from 表名
        设置别名：select 字段名1 as别名，字段2as别名from表名
        去除重复记录：select distinct 字段列表from表名
        例子：select name，workno，age from emp；
                   select *（尽量不要写*） from emp；
                   select workaddress as ’工作地址‘ from emp；
                   select distinct workadd ress from emp；（去重操作）
                   select * from emp where age=1;
                    select * from emp where age<20;
                    select * from emp where idcard is null；
                    select * from emp where idcard is not null；
                    select * from emp where age !=(<>)88；
                    select * from emp where age >= 15 and(&&) age<+25;
                    Select * from emp where age between 15 and 20;
                    Select * from emp where gender = ‘女’ and age<25;
                    Select * from emp where age = 18 or age = 20 or age = 40;
                    Select * from emp where age in(18,20,40);
                    Select * from emp where name like__(模糊匹配：_占位符，%任意长度字符)
                    select * from emp where idcard like’%x‘；
                    select * from emp where idcard like’______________x’;
                聚合函数：select聚合函数（字段列表）from
                    count：统计数量；
                    max：最大值
                    min：最小值
                    avg：平均值
                    sum：求和
                    例子：
                    select count（*）from emp；(不计算null值)
                    select count(idcard) from emp;
                    select avg(age) from emp;
                    Select Max(age) from emp;
                    Select sum(age) from emp Where WorkAddress = ‘西安’;
                分组查询：
                select 字段列表from表名 group by 分组字段名[having分组后过滤条件];
                    where和having区别：
                        1.执行时机：where分组前进行过滤，不满足where条件不参与分组，而having是分组之后对结果进行过滤。
                        2.判断条件不同：where不能对复合函数进行判断，而having可以
                    例子：select gender,count(*) from emp group by gender;
                               Select gender,avg(age) from group by gender;
                               Select count(*) from emp where age <45 group by workAddress;
                               Select workaddress ,count(*) from emp where  age<45 group by workaddress having count(*)>=3;
                排序查询：
select 字段列表 from 表名 order by 字段1 排序方式1，字段2 排序方式2；
                    排序方式：
                        1.asc：升序（默认值）2.desc：降序
                        例：select * from emp order by age asc;
                               Select * from emp order by age desc;
                               Select * from emp order by entrytime desc;
                               Select * from emp order by age asc,entrytime desc;
                分页查询：
                select 字段列表 from 表名 limit起始索引，查询记录数；
                起始索引从0开始，起始索引 = （查询页码-1）*每页显示记录数
                分页查询是数据库的放呀，不同的数据库有不同的实现，mysql是limit
                如果查询的是第一页数据，起始索引可以省略，直接简写为limit10；
                例子：
                    select * from emp Limit 0,10;
                    Select * from emp limit 10,10;
    10.DQL查询实例：
        select * from where gender = ‘女’ age in (20,21,22,23,24);
        Select * from where gender = ‘男’ and age between 20 and 40 and name like ‘___’;
        Select gender count(*) from emp where age<60 group by gender;
        Select name,age from emp where age<=35 order by age asc,entrydate desc;
        Select * from emp where gender = ‘男’ and age between 20 and 40 order by age asc, entrydate asc limit 5 ;
    11.DQL语句的执行顺序：
            1.from 2.where 3.groupby 4. select 5. order by6.limit
            例子：select name,age from emp where age>=25 order by age asc;
    12.DCL-用来管理数据库的用户，控制数据库的访问权限
        1.查询用户：USE mysql；select*from user;
        2.创建用户：create user ’用户名‘@’主机名‘identified by ’密码‘；
        3.修改用户密码：alter user ’用户名‘@’主机名‘ identified with
mysql_native_password by ’新密码‘；
        4.删除用户：
            drop user’用户名‘@’主机名‘；
        5.权限控制：ALL或者ALL PRIVILEGES（所有权限）
                            SELECT 查询
                            insert 插入数据
                            update 修改数据
                            delete 删除数据
                            alter 修改表
                            drop 删除数据库/表/视图
                            create 创建数据库/表
                            查询权限：show grants for ’用户名‘@’主机名‘
                            授予权限：grant 权限列表 on 数据库名，表名 to ‘用户名’@‘主机名’；
                            撤销权限：revoke 权限列表 on 数据库名，表名 from ‘用户名’@‘主机名’；
    13.函数（可以直接被调用的程序或者代码）：
        1.字符串函数：CONCOT（s1，s2），字符串拼接
        2.lower，upper，将字符串全部转写为（小写，大写）；
        3.LPAD，RPAD（str，n，pad），左/右填充用字符串pad对str左/右进行填充直到达到n个字符串长度
        4.trim（str）去掉字符串头部和尾部的空格
        5.SUBSTRING（str，start，len）：截取字符串，start开始，长度为len
            例：select concot(‘hello’,’mysql’);
                   Select lower(‘hello’);
                   Select upper(‘hello’);
                   Select lpad(‘01’,5,’-’);
                   Select rpad(‘01’,5,’-’);
                   Select trim(‘ hello mysql   ’);
                    Substring(‘mysql’,1,5);
             实例：
            Update emp set workno = lpad(workno,5,’0’);
        6.数值函数：
                Ceil()向上取整，floor（）向下取整，mod（x，y）返回x/y的模，rand（）返回0-1内的随机数，round（x，y）求参数的四舍五入的值，保留y位小数
            例：select ceil(1.9);
            例子：生成一个随机六位数的验证码:select                                     lpad(round(rand()*1000000,0),6,’0’);
        7.日期函数：
            curdate返回当前日期，curdate返回当前日期，now返回当前日期和时间，year（date）获取指定date的年份，month（date）获取指定date的月份，day（date）获取指定date的日期，DATE_ADD(date,interval expr type)返回一个日期/时间值加上一个时间间隔expr后的时间值，DATEDIFF（date1，date2）返回起始时间date1和结束时间date2之间的天数
            例子：select curdate()
                        Select curtime()
                        Select now()
                        Select year(now())
                     例子：查询所有员工的入职天数，并根据入职天数倒序排序：
                    Select name,DATEDIFF(curdate(),entrydate) as ‘entrydays’from emp order by entrydays desc;
        8.流程控制函数：if，IFNULL(value1,value2)value1不为空，返回value1否则返回value2，case when[val1]then [res1]else[default]end如果val1为true，返回res1，否则返回deault默认值，CASE[expr]when[val1]then[res1]….else[default]end 如果expr的值等于val1，返回res1，…否则返回default默认值。
    14.约束：作用于表中字段上的规则，用于限制存储在表中的数据，保证数据库中数据的正确，有效性和完整性
        分类：非空约束（not null），唯一约束（unique），主键约束（primary key），默认约束（default），检查约束（check），外键约束（用来让两张表的数据进行连接保证数据的一致性和完整性foreign key）。
    例子：
        Create table user(
            Id int primary auto_increment comment’’,
            Name varchar(10) not null unique comment’’,
            Age int check(age>0 and age<120))comment ‘’,
            Status char(1) default ‘1’ comment’’,
            Gender char(1) comment’’)comment’’;
    外键约束：通过外键将两张表连接起来，有外键的称之为子表，建立外键关联：
        添加外键：
        alter table 表名 add constraint 外键名称 foreign key （外键字段名）references 主表（主表列名）；
        具体：alter table emp add constraint fk_emp_deft_id foreign key(dept-id) reference dept(id);
    15.多表关系：一对多多对一（在多的一方建立外键，）
        多对多：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键；
        一对一：多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率。
    16.多表查询：笛卡尔积，在多表查询是要消除无效笛卡尔积，（select * from emp dept）;
    解决方法：select * from emp,dept where emp.dept_id = dept.id;
        1.内连接：相当于查询A，B交集部分数据
            隐式内连接：select 字段列表 from 表1，表2 where 条件…;通常使用起别名的方式进行书写，起了别名之后就不能用远名字编写了
            显式内连接：select 字段列表 from 表1[inner] join  表2 on 连接条件..;inner关键字可以省略
        2.外连接：
            左连接（查询左表所有数据以及两张表交集部分数据），
            select字段列表 from 表1 left [outer] join 表2 on 条件
            右连接（查询右表所有数据以及两张表交集部分数据）
            select字段列表 from 表1 right [outer] join 表2 on 条件
        3.自连接：当前表与自身的连接查询，自连接必须使用表别名
            Select 字段列表 from 表a 别名a join 表a 别名b on 条件..;
            例子：select a.name,b.name from emp a,emp b,where a.managerid = b.id;
        4.联合查询：union，union all对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致
            select 字段列表 from 表a union [all] select 字段列表 from 表b；如果有all的话是直接拼接结果，而没有的话是会去重的。
            例子：select * from emp Where salary <5000 union (all) select * from emp where age > 50;
        5.子查询：sql语句中嵌套select语句，也称为子查询
            select * from t1 where column = (select column from t2 )
            标量子查询（子查询结果为单个值）
                select * from emp where dept_id = (select id from dept where name = ‘销售部’);
            列子查询（子查询的结果为一列）常用：in（在指定的范围之内多选一），not in（不在指定的集合范围之内），any（子查询返回列表中，有任意一个满足即可），some（与
any同等，使用some的地方都可以用any），all（子查询返回列表中的所有值必须都满足）
                Select id from dept where name = ‘销售部’ or name = ‘市场部’;
                Select * from emp where dept_id in(Select id from dept where name = ‘销售部’ or name = ‘市场部’);
                Select * from emp where salary > all (select salary from emp where dept_id = (select id from dept where name = ‘财务部’))
            行子查询（查询结果为一行）:子查询返回结果是一行常用：in,not in,=,<>
                Select * from emp where (salary,managerid) = (select salary,managerid from emp where name = ‘张无忌’);
            表子查询（子查询结果为多行多列）常用in
                select * from emp where (job,salary) in (select job,salary from emp where name = ‘鹿杖客’ or name = ‘宋远桥’)
    16.事务：一组操作的集合，他是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或者撤销操作请求，即这些操作要么同时成功，要不同时失败
            事务操作：
            事务四大特性：
            并发事务问题：
            事务隔离级别：